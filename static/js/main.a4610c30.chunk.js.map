{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAML,EAAMG,QAAQG,OACpB,4BAAIN,EAAMG,QAAQI,YCHbC,EAAY,SAAAR,GAAK,OAC1B,qBAAKC,UAAU,YAAf,SACQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OAC3B,cAAC,EAAD,CAAwBA,QAASA,GAAtBA,EAAQC,UCHjBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAY,SACXa,KAAK,SAASF,YAAaA,EAC5BG,SAAUF,MCmCCG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAYJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAXrC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAa,IALD,E,qDAQhB,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAMxC,WAAS,IAAD,EAC8BC,KAAKN,MAAhCb,EADH,EACGA,SAAUU,EADb,EACaA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACF,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a4610c30.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = props => (\n    <div className='card-container'>\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\n        <h2 >{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component'\nexport const CardList  = props => (\n    <div className='card-list'>\n           {props.monsters.map(monster => (\n           <Card key={monster.id } monster={monster}/> \n           ))}\n    </div>\n);","\nimport React from 'react';\nimport './search-box.styles.css';\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input\n    className = 'search'\n     type='search' placeholder={placeholder}\n    onChange={handleChange}\n    />\n);\n"," //import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchBox} from './components/search-bar/search-bar.component';\n\nclass App extends Component{\n  constructor() {\n    super();\n  \n  this.state = {\n    monsters : [],\n    searchField: ''\n  };\n}\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters: users}));\n}\nhandleChange = e => {\n  this.setState({searchField: e.target.value});\n};\n\n  render(){\n      const {monsters, searchField } =  this.state;\n      const filterMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n      return (\n        <div className=\"App\">\n          <h1>Monster Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n       />\n          <CardList monsters={filterMonsters} />\n        </div> \n      );\n}}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}